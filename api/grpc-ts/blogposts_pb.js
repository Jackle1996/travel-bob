/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.travelbob.blogs.AllBlogsReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.AllBlogsRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.Blog', null, global);
goog.exportSymbol('proto.travelbob.blogs.Blogpost', null, global);
goog.exportSymbol('proto.travelbob.blogs.BlogpostsReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.BlogpostsRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.CreateBlogReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.CreateBlogRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.CreateBlogpostReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.CreateBlogpostRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.DeleteBlogReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.DeleteBlogRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.DeleteBlogpostReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.DeleteBlogpostRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.Timestamp', null, global);
goog.exportSymbol('proto.travelbob.blogs.UpdateBlogReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.UpdateBlogRequest', null, global);
goog.exportSymbol('proto.travelbob.blogs.UpdateBlogpostReply', null, global);
goog.exportSymbol('proto.travelbob.blogs.UpdateBlogpostRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.AllBlogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.AllBlogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.AllBlogsRequest.displayName = 'proto.travelbob.blogs.AllBlogsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.AllBlogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.AllBlogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.AllBlogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.AllBlogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.AllBlogsRequest}
 */
proto.travelbob.blogs.AllBlogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.AllBlogsRequest;
  return proto.travelbob.blogs.AllBlogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.AllBlogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.AllBlogsRequest}
 */
proto.travelbob.blogs.AllBlogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.AllBlogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.AllBlogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.AllBlogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.AllBlogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.AllBlogsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.travelbob.blogs.AllBlogsReply.repeatedFields_, null);
};
goog.inherits(proto.travelbob.blogs.AllBlogsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.AllBlogsReply.displayName = 'proto.travelbob.blogs.AllBlogsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.travelbob.blogs.AllBlogsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.AllBlogsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.AllBlogsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.AllBlogsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.AllBlogsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogsList: jspb.Message.toObjectList(msg.getBlogsList(),
    proto.travelbob.blogs.Blog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.AllBlogsReply}
 */
proto.travelbob.blogs.AllBlogsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.AllBlogsReply;
  return proto.travelbob.blogs.AllBlogsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.AllBlogsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.AllBlogsReply}
 */
proto.travelbob.blogs.AllBlogsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blog;
      reader.readMessage(value,proto.travelbob.blogs.Blog.deserializeBinaryFromReader);
      msg.addBlogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.AllBlogsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.AllBlogsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.AllBlogsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.AllBlogsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.travelbob.blogs.Blog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Blog blogs = 1;
 * @return {!Array<!proto.travelbob.blogs.Blog>}
 */
proto.travelbob.blogs.AllBlogsReply.prototype.getBlogsList = function() {
  return /** @type{!Array<!proto.travelbob.blogs.Blog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.travelbob.blogs.Blog, 1));
};


/** @param {!Array<!proto.travelbob.blogs.Blog>} value */
proto.travelbob.blogs.AllBlogsReply.prototype.setBlogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.travelbob.blogs.Blog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.travelbob.blogs.Blog}
 */
proto.travelbob.blogs.AllBlogsReply.prototype.addBlogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.travelbob.blogs.Blog, opt_index);
};


proto.travelbob.blogs.AllBlogsReply.prototype.clearBlogsList = function() {
  this.setBlogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.BlogpostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.BlogpostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.BlogpostsRequest.displayName = 'proto.travelbob.blogs.BlogpostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.BlogpostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.BlogpostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.BlogpostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.BlogpostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.BlogpostsRequest}
 */
proto.travelbob.blogs.BlogpostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.BlogpostsRequest;
  return proto.travelbob.blogs.BlogpostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.BlogpostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.BlogpostsRequest}
 */
proto.travelbob.blogs.BlogpostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.BlogpostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.BlogpostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.BlogpostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.BlogpostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 blogId = 1;
 * @return {number}
 */
proto.travelbob.blogs.BlogpostsRequest.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.BlogpostsRequest.prototype.setBlogid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.BlogpostsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.travelbob.blogs.BlogpostsReply.repeatedFields_, null);
};
goog.inherits(proto.travelbob.blogs.BlogpostsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.BlogpostsReply.displayName = 'proto.travelbob.blogs.BlogpostsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.travelbob.blogs.BlogpostsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.BlogpostsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.BlogpostsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.BlogpostsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.BlogpostsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogpostsList: jspb.Message.toObjectList(msg.getBlogpostsList(),
    proto.travelbob.blogs.Blogpost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.BlogpostsReply}
 */
proto.travelbob.blogs.BlogpostsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.BlogpostsReply;
  return proto.travelbob.blogs.BlogpostsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.BlogpostsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.BlogpostsReply}
 */
proto.travelbob.blogs.BlogpostsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blogpost;
      reader.readMessage(value,proto.travelbob.blogs.Blogpost.deserializeBinaryFromReader);
      msg.addBlogposts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.BlogpostsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.BlogpostsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.BlogpostsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.BlogpostsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogpostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.travelbob.blogs.Blogpost.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Blogpost blogposts = 1;
 * @return {!Array<!proto.travelbob.blogs.Blogpost>}
 */
proto.travelbob.blogs.BlogpostsReply.prototype.getBlogpostsList = function() {
  return /** @type{!Array<!proto.travelbob.blogs.Blogpost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.travelbob.blogs.Blogpost, 1));
};


/** @param {!Array<!proto.travelbob.blogs.Blogpost>} value */
proto.travelbob.blogs.BlogpostsReply.prototype.setBlogpostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.travelbob.blogs.Blogpost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.travelbob.blogs.Blogpost}
 */
proto.travelbob.blogs.BlogpostsReply.prototype.addBlogposts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.travelbob.blogs.Blogpost, opt_index);
};


proto.travelbob.blogs.BlogpostsReply.prototype.clearBlogpostsList = function() {
  this.setBlogpostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.CreateBlogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.CreateBlogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.CreateBlogRequest.displayName = 'proto.travelbob.blogs.CreateBlogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.CreateBlogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.CreateBlogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.CreateBlogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blog: (f = msg.getBlog()) && proto.travelbob.blogs.Blog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.CreateBlogRequest}
 */
proto.travelbob.blogs.CreateBlogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.CreateBlogRequest;
  return proto.travelbob.blogs.CreateBlogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.CreateBlogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.CreateBlogRequest}
 */
proto.travelbob.blogs.CreateBlogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blog;
      reader.readMessage(value,proto.travelbob.blogs.Blog.deserializeBinaryFromReader);
      msg.setBlog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.CreateBlogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.CreateBlogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.CreateBlogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlog();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.travelbob.blogs.Blog.serializeBinaryToWriter
    );
  }
};


/**
 * optional Blog blog = 1;
 * @return {?proto.travelbob.blogs.Blog}
 */
proto.travelbob.blogs.CreateBlogRequest.prototype.getBlog = function() {
  return /** @type{?proto.travelbob.blogs.Blog} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Blog, 1));
};


/** @param {?proto.travelbob.blogs.Blog|undefined} value */
proto.travelbob.blogs.CreateBlogRequest.prototype.setBlog = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.travelbob.blogs.CreateBlogRequest.prototype.clearBlog = function() {
  this.setBlog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.CreateBlogRequest.prototype.hasBlog = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.CreateBlogReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.CreateBlogReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.CreateBlogReply.displayName = 'proto.travelbob.blogs.CreateBlogReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.CreateBlogReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.CreateBlogReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.CreateBlogReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.CreateBlogReply}
 */
proto.travelbob.blogs.CreateBlogReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.CreateBlogReply;
  return proto.travelbob.blogs.CreateBlogReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.CreateBlogReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.CreateBlogReply}
 */
proto.travelbob.blogs.CreateBlogReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.CreateBlogReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.CreateBlogReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.CreateBlogReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 blogId = 1;
 * @return {number}
 */
proto.travelbob.blogs.CreateBlogReply.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.CreateBlogReply.prototype.setBlogid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.CreateBlogpostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.CreateBlogpostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.CreateBlogpostRequest.displayName = 'proto.travelbob.blogs.CreateBlogpostRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.CreateBlogpostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.CreateBlogpostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.CreateBlogpostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogpostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogpost: (f = msg.getBlogpost()) && proto.travelbob.blogs.Blogpost.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.CreateBlogpostRequest}
 */
proto.travelbob.blogs.CreateBlogpostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.CreateBlogpostRequest;
  return proto.travelbob.blogs.CreateBlogpostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.CreateBlogpostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.CreateBlogpostRequest}
 */
proto.travelbob.blogs.CreateBlogpostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blogpost;
      reader.readMessage(value,proto.travelbob.blogs.Blogpost.deserializeBinaryFromReader);
      msg.setBlogpost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.CreateBlogpostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.CreateBlogpostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.CreateBlogpostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogpostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogpost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.travelbob.blogs.Blogpost.serializeBinaryToWriter
    );
  }
};


/**
 * optional Blogpost blogpost = 1;
 * @return {?proto.travelbob.blogs.Blogpost}
 */
proto.travelbob.blogs.CreateBlogpostRequest.prototype.getBlogpost = function() {
  return /** @type{?proto.travelbob.blogs.Blogpost} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Blogpost, 1));
};


/** @param {?proto.travelbob.blogs.Blogpost|undefined} value */
proto.travelbob.blogs.CreateBlogpostRequest.prototype.setBlogpost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.travelbob.blogs.CreateBlogpostRequest.prototype.clearBlogpost = function() {
  this.setBlogpost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.CreateBlogpostRequest.prototype.hasBlogpost = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.CreateBlogpostReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.CreateBlogpostReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.CreateBlogpostReply.displayName = 'proto.travelbob.blogs.CreateBlogpostReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.CreateBlogpostReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.CreateBlogpostReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.CreateBlogpostReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogpostReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogpostid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.CreateBlogpostReply}
 */
proto.travelbob.blogs.CreateBlogpostReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.CreateBlogpostReply;
  return proto.travelbob.blogs.CreateBlogpostReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.CreateBlogpostReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.CreateBlogpostReply}
 */
proto.travelbob.blogs.CreateBlogpostReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogpostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.CreateBlogpostReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.CreateBlogpostReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.CreateBlogpostReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.CreateBlogpostReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogpostid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 blogpostId = 1;
 * @return {number}
 */
proto.travelbob.blogs.CreateBlogpostReply.prototype.getBlogpostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.CreateBlogpostReply.prototype.setBlogpostid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.DeleteBlogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.DeleteBlogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.DeleteBlogRequest.displayName = 'proto.travelbob.blogs.DeleteBlogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.DeleteBlogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.DeleteBlogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.DeleteBlogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.DeleteBlogRequest}
 */
proto.travelbob.blogs.DeleteBlogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.DeleteBlogRequest;
  return proto.travelbob.blogs.DeleteBlogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.DeleteBlogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.DeleteBlogRequest}
 */
proto.travelbob.blogs.DeleteBlogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.DeleteBlogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.DeleteBlogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.DeleteBlogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 blogId = 1;
 * @return {number}
 */
proto.travelbob.blogs.DeleteBlogRequest.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.DeleteBlogRequest.prototype.setBlogid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.DeleteBlogReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.DeleteBlogReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.DeleteBlogReply.displayName = 'proto.travelbob.blogs.DeleteBlogReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.DeleteBlogReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.DeleteBlogReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.DeleteBlogReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.DeleteBlogReply}
 */
proto.travelbob.blogs.DeleteBlogReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.DeleteBlogReply;
  return proto.travelbob.blogs.DeleteBlogReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.DeleteBlogReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.DeleteBlogReply}
 */
proto.travelbob.blogs.DeleteBlogReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.DeleteBlogReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.DeleteBlogReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.DeleteBlogReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.DeleteBlogpostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.DeleteBlogpostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.DeleteBlogpostRequest.displayName = 'proto.travelbob.blogs.DeleteBlogpostRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.DeleteBlogpostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.DeleteBlogpostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.DeleteBlogpostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogpostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogpostid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.DeleteBlogpostRequest}
 */
proto.travelbob.blogs.DeleteBlogpostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.DeleteBlogpostRequest;
  return proto.travelbob.blogs.DeleteBlogpostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.DeleteBlogpostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.DeleteBlogpostRequest}
 */
proto.travelbob.blogs.DeleteBlogpostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogpostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.DeleteBlogpostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.DeleteBlogpostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.DeleteBlogpostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogpostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogpostid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 blogpostId = 1;
 * @return {number}
 */
proto.travelbob.blogs.DeleteBlogpostRequest.prototype.getBlogpostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.DeleteBlogpostRequest.prototype.setBlogpostid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.DeleteBlogpostReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.DeleteBlogpostReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.DeleteBlogpostReply.displayName = 'proto.travelbob.blogs.DeleteBlogpostReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.DeleteBlogpostReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.DeleteBlogpostReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.DeleteBlogpostReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogpostReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.DeleteBlogpostReply}
 */
proto.travelbob.blogs.DeleteBlogpostReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.DeleteBlogpostReply;
  return proto.travelbob.blogs.DeleteBlogpostReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.DeleteBlogpostReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.DeleteBlogpostReply}
 */
proto.travelbob.blogs.DeleteBlogpostReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.DeleteBlogpostReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.DeleteBlogpostReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.DeleteBlogpostReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.DeleteBlogpostReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.UpdateBlogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.UpdateBlogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.UpdateBlogRequest.displayName = 'proto.travelbob.blogs.UpdateBlogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.UpdateBlogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.UpdateBlogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.UpdateBlogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blog: (f = msg.getBlog()) && proto.travelbob.blogs.Blog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.UpdateBlogRequest}
 */
proto.travelbob.blogs.UpdateBlogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.UpdateBlogRequest;
  return proto.travelbob.blogs.UpdateBlogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.UpdateBlogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.UpdateBlogRequest}
 */
proto.travelbob.blogs.UpdateBlogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blog;
      reader.readMessage(value,proto.travelbob.blogs.Blog.deserializeBinaryFromReader);
      msg.setBlog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.UpdateBlogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.UpdateBlogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.UpdateBlogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlog();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.travelbob.blogs.Blog.serializeBinaryToWriter
    );
  }
};


/**
 * optional Blog blog = 1;
 * @return {?proto.travelbob.blogs.Blog}
 */
proto.travelbob.blogs.UpdateBlogRequest.prototype.getBlog = function() {
  return /** @type{?proto.travelbob.blogs.Blog} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Blog, 1));
};


/** @param {?proto.travelbob.blogs.Blog|undefined} value */
proto.travelbob.blogs.UpdateBlogRequest.prototype.setBlog = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.travelbob.blogs.UpdateBlogRequest.prototype.clearBlog = function() {
  this.setBlog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.UpdateBlogRequest.prototype.hasBlog = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.UpdateBlogReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.UpdateBlogReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.UpdateBlogReply.displayName = 'proto.travelbob.blogs.UpdateBlogReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.UpdateBlogReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.UpdateBlogReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.UpdateBlogReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.UpdateBlogReply}
 */
proto.travelbob.blogs.UpdateBlogReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.UpdateBlogReply;
  return proto.travelbob.blogs.UpdateBlogReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.UpdateBlogReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.UpdateBlogReply}
 */
proto.travelbob.blogs.UpdateBlogReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.UpdateBlogReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.UpdateBlogReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.UpdateBlogReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.UpdateBlogpostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.UpdateBlogpostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.UpdateBlogpostRequest.displayName = 'proto.travelbob.blogs.UpdateBlogpostRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.UpdateBlogpostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.UpdateBlogpostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogpostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blogpost: (f = msg.getBlogpost()) && proto.travelbob.blogs.Blogpost.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.UpdateBlogpostRequest}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.UpdateBlogpostRequest;
  return proto.travelbob.blogs.UpdateBlogpostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.UpdateBlogpostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.UpdateBlogpostRequest}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.travelbob.blogs.Blogpost;
      reader.readMessage(value,proto.travelbob.blogs.Blogpost.deserializeBinaryFromReader);
      msg.setBlogpost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.UpdateBlogpostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.UpdateBlogpostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogpostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlogpost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.travelbob.blogs.Blogpost.serializeBinaryToWriter
    );
  }
};


/**
 * optional Blogpost blogpost = 1;
 * @return {?proto.travelbob.blogs.Blogpost}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.prototype.getBlogpost = function() {
  return /** @type{?proto.travelbob.blogs.Blogpost} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Blogpost, 1));
};


/** @param {?proto.travelbob.blogs.Blogpost|undefined} value */
proto.travelbob.blogs.UpdateBlogpostRequest.prototype.setBlogpost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.travelbob.blogs.UpdateBlogpostRequest.prototype.clearBlogpost = function() {
  this.setBlogpost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.UpdateBlogpostRequest.prototype.hasBlogpost = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.UpdateBlogpostReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.UpdateBlogpostReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.UpdateBlogpostReply.displayName = 'proto.travelbob.blogs.UpdateBlogpostReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.UpdateBlogpostReply.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.UpdateBlogpostReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.UpdateBlogpostReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogpostReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.UpdateBlogpostReply}
 */
proto.travelbob.blogs.UpdateBlogpostReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.UpdateBlogpostReply;
  return proto.travelbob.blogs.UpdateBlogpostReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.UpdateBlogpostReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.UpdateBlogpostReply}
 */
proto.travelbob.blogs.UpdateBlogpostReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.UpdateBlogpostReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.UpdateBlogpostReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.UpdateBlogpostReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.UpdateBlogpostReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.Blog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.Blog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.Blog.displayName = 'proto.travelbob.blogs.Blog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.Blog.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.Blog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.Blog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Blog.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blogimageurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    author: jspb.Message.getFieldWithDefault(msg, 4, ""),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 6, ""),
    startdate: (f = msg.getStartdate()) && proto.travelbob.blogs.Timestamp.toObject(includeInstance, f),
    enddate: (f = msg.getEnddate()) && proto.travelbob.blogs.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.Blog}
 */
proto.travelbob.blogs.Blog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.Blog;
  return proto.travelbob.blogs.Blog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.Blog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.Blog}
 */
proto.travelbob.blogs.Blog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlogimageurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 7:
      var value = new proto.travelbob.blogs.Timestamp;
      reader.readMessage(value,proto.travelbob.blogs.Timestamp.deserializeBinaryFromReader);
      msg.setStartdate(value);
      break;
    case 8:
      var value = new proto.travelbob.blogs.Timestamp;
      reader.readMessage(value,proto.travelbob.blogs.Timestamp.deserializeBinaryFromReader);
      msg.setEnddate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.Blog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.Blog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.Blog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Blog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBlogimageurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStartdate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.travelbob.blogs.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnddate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.travelbob.blogs.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.travelbob.blogs.Blog.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.Blog.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string blogImageUrl = 2;
 * @return {string}
 */
proto.travelbob.blogs.Blog.prototype.getBlogimageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blog.prototype.setBlogimageurl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.travelbob.blogs.Blog.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blog.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string author = 4;
 * @return {string}
 */
proto.travelbob.blogs.Blog.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blog.prototype.setAuthor = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.travelbob.blogs.Blog.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blog.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string destination = 6;
 * @return {string}
 */
proto.travelbob.blogs.Blog.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blog.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Timestamp startDate = 7;
 * @return {?proto.travelbob.blogs.Timestamp}
 */
proto.travelbob.blogs.Blog.prototype.getStartdate = function() {
  return /** @type{?proto.travelbob.blogs.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Timestamp, 7));
};


/** @param {?proto.travelbob.blogs.Timestamp|undefined} value */
proto.travelbob.blogs.Blog.prototype.setStartdate = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.travelbob.blogs.Blog.prototype.clearStartdate = function() {
  this.setStartdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.Blog.prototype.hasStartdate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Timestamp endDate = 8;
 * @return {?proto.travelbob.blogs.Timestamp}
 */
proto.travelbob.blogs.Blog.prototype.getEnddate = function() {
  return /** @type{?proto.travelbob.blogs.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Timestamp, 8));
};


/** @param {?proto.travelbob.blogs.Timestamp|undefined} value */
proto.travelbob.blogs.Blog.prototype.setEnddate = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.travelbob.blogs.Blog.prototype.clearEnddate = function() {
  this.setEnddate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.Blog.prototype.hasEnddate = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.Blogpost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.Blogpost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.Blogpost.displayName = 'proto.travelbob.blogs.Blogpost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.Blogpost.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.Blogpost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.Blogpost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Blogpost.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headerimageurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blogid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    traveldate: (f = msg.getTraveldate()) && proto.travelbob.blogs.Timestamp.toObject(includeInstance, f),
    location: jspb.Message.getFieldWithDefault(msg, 7, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 8, ""),
    author: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.Blogpost}
 */
proto.travelbob.blogs.Blogpost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.Blogpost;
  return proto.travelbob.blogs.Blogpost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.Blogpost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.Blogpost}
 */
proto.travelbob.blogs.Blogpost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderimageurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlogid(value);
      break;
    case 6:
      var value = new proto.travelbob.blogs.Timestamp;
      reader.readMessage(value,proto.travelbob.blogs.Timestamp.deserializeBinaryFromReader);
      msg.setTraveldate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.Blogpost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.Blogpost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.Blogpost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Blogpost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeaderimageurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlogid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTraveldate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.travelbob.blogs.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.travelbob.blogs.Blogpost.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.Blogpost.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string headerImageUrl = 2;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getHeaderimageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setHeaderimageurl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 blogId = 5;
 * @return {number}
 */
proto.travelbob.blogs.Blogpost.prototype.getBlogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.travelbob.blogs.Blogpost.prototype.setBlogid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Timestamp travelDate = 6;
 * @return {?proto.travelbob.blogs.Timestamp}
 */
proto.travelbob.blogs.Blogpost.prototype.getTraveldate = function() {
  return /** @type{?proto.travelbob.blogs.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.travelbob.blogs.Timestamp, 6));
};


/** @param {?proto.travelbob.blogs.Timestamp|undefined} value */
proto.travelbob.blogs.Blogpost.prototype.setTraveldate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.travelbob.blogs.Blogpost.prototype.clearTraveldate = function() {
  this.setTraveldate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.travelbob.blogs.Blogpost.prototype.hasTraveldate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string location = 7;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string summary = 8;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setSummary = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string author = 9;
 * @return {string}
 */
proto.travelbob.blogs.Blogpost.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.travelbob.blogs.Blogpost.prototype.setAuthor = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.travelbob.blogs.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.travelbob.blogs.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.travelbob.blogs.Timestamp.displayName = 'proto.travelbob.blogs.Timestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.travelbob.blogs.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.travelbob.blogs.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.travelbob.blogs.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.travelbob.blogs.Timestamp}
 */
proto.travelbob.blogs.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.travelbob.blogs.Timestamp;
  return proto.travelbob.blogs.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.travelbob.blogs.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.travelbob.blogs.Timestamp}
 */
proto.travelbob.blogs.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.travelbob.blogs.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.travelbob.blogs.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.travelbob.blogs.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.travelbob.blogs.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.travelbob.blogs.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.travelbob.blogs.Timestamp.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.travelbob.blogs);
